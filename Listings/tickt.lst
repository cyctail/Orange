C51 COMPILER V9.59.0.0   TICKT                                                             03/03/2021 15:21:57 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE TICKT
OBJECT MODULE PLACED IN .\OBJ\tickt.obj
COMPILER INVOKED BY: D:\sofeware\Keil\Keil5_MDK\C51\BIN\C51.EXE LIB\Tick\tickt.c OPTIMIZE(9,SPEED) BROWSE INCDIR(.\USER;
                    -.\LIB\Data;.\LIB\eeprom;.\LIB\FunctionOS;.\LIB\OSAL;.\LIB\Scan;.\LIB\SEG;.\LIB\Tick;.\LIB\H;.\LIB\M_IO;.\LIB\M_Math;.\LI
                    -B\DATAST;.\LIB\IIC;.\USER\Mode;.\USER\Scankey;.\USER\Main;.\LIB\SYS) DEBUG OBJECTEXTEND PRINT(.\Listings\tickt.lst) TABS
                    -(2) OBJECT(.\OBJ\tickt.obj)

line level    source

   1          #include "tickt.h"
   2          
   3          /*_________________^_^___________________*/
   4          #if Tick_Ver==1
              struct Tick_struct t1;
              /**/
              uchar Tick_Time(struct Tick_struct* t){
                if(t->time>0){
                  switch(t->flag){
                    case 0: if(++t->Time_Cnt>=2)      {t->Time_Cnt=0;t->time--;} break;
                    case 1: if(++t->Time_Cnt>=20)     {t->Time_Cnt=0;t->time--;} break;
                    case 2: if(++t->Time_Cnt>=200)      {t->Time_Cnt=0;t->time--;} break;
                    case 3: if(++t->Time_Cnt>=12000)      {t->Time_Cnt=0;t->time--;} break;
                  }
                }else{
                  t->time=0; t->Time_Cnt=0; return 1;
                }
                return 0;
              }
              /**/
              uchar set_tickt(struct Tick_struct* t,uint set_time,uint set_Time_Cnt,uchar set_flag){
                  t->time=set_time;
                  t->Time_Cnt=set_Time_Cnt;
                  t->flag=set_flag;
                return 1;
              }
              #endif
  28          #if Tick_Ver==2
  29          struct Tick_Str xdata Ts[TICK_NUM];
  30          /*1*/
  31          uchar Set_SIM_TICK(uchar sim_id,uint stime,uint hours,uint mins,uint secs,uint sttime_cnt,uchar sflag,ucha
             -r OPEN){
  32   1        Ts[sim_id].hour   = hours;
  33   1        Ts[sim_id].min    = mins;
  34   1        Ts[sim_id].sec    = secs;
  35   1        Ts[sim_id].time   = stime;
  36   1        Ts[sim_id].Time_Cnt = sttime_cnt;
  37   1        Ts[sim_id].flag   = sflag;
  38   1        Ts[sim_id].T_ENABLE = OPEN;
  39   1        if(OPEN==TRUN)Ts[sim_id].T_SUCCESS= 0;
  40   1        return sim_id;
  41   1      }
  42          /*3*/
  43          uchar ISR_Tick_Time(struct Tick_Str* t){
  44   1        if(t->time==0 && t->hour==0 && t->min==0 && t->sec==0){
  45   2          return 1;
  46   2        }else{
  47   2          switch(t->flag){
  48   3            case 9: t->time--; break;                       //0.001s
  49   3            case 0: if(++t->Time_Cnt>=10) {t->Time_Cnt=0;t->time--;} break;   //0.01s
  50   3            case 1: if(++t->Time_Cnt>=100)  {t->Time_Cnt=0;t->time--;} break;   //0.1s
  51   3            case 2: if(++t->Time_Cnt>=1000) {t->Time_Cnt=0;t->time--;} break;   //1s
C51 COMPILER V9.59.0.0   TICKT                                                             03/03/2021 15:21:57 PAGE 2   

  52   3            case 3: if(++t->Time_Cnt>=60000){t->Time_Cnt=0;t->time--;} break;   //1min
  53   3            case 4: if(++t->Time_Cnt>=1000) {t->Time_Cnt=0;if(t->sec>0)t->sec--;else{if(t->min>0){t->min--;t->sec=5
             -9;}else{return 1;}}} break;   //fen.miao
  54   3            case 5: if(++t->Time_Cnt>=60000){t->Time_Cnt=0;if(t->sec>0)t->sec--;else{if(t->hour>0){t->hour--;t->sec
             -=59;}else{return 1;}}} break; //shi.fen
  55   3          }
  56   2        }
  57   1        return 0;
  58   1      }
  59          /*2*/
  60          void _SIM_ISR(uchar i){
  61   1        if(Ts[i].T_ENABLE==TRUN){
  62   2          if(ISR_Tick_Time(&Ts[i])){
  63   3            Ts[i].T_ENABLE=TSTOP;
  64   3            Ts[i].T_SUCCESS=1;
  65   3          }
  66   2        }
  67   1      }
  68          /*UR*/
  69          uchar READ_T(uchar i){
  70   1        uchar ret_TF=Ts[i].T_SUCCESS;
  71   1        Ts[i].T_SUCCESS=0;
  72   1        return ret_TF;
  73   1      }
  74          /**/
  75          uchar get_TS(uchar sim_id){
  76   1        return (Ts[sim_id].T_ENABLE|Ts[sim_id].T_SUCCESS);
  77   1      }
  78          /**/
  79          void set_TS(uchar sim_id,uchar T_stat){
  80   1        Ts[sim_id].T_ENABLE=T_stat;
  81   1        Ts[sim_id].T_SUCCESS=0;
  82   1      }
  83          /**/
  84          #if USE_GET_TIME
              uint Get_Time(uchar sim_id,uchar get_stat){
                switch(get_stat){
                  case GTIME:   return Ts[sim_id].time;   break;
                  case GHOUR:   return Ts[sim_id].hour;   break;
                  case GMIN:    return Ts[sim_id].min;    break;
                  case GSEC:    return Ts[sim_id].sec;    break;
                  case GTTIME:  return Ts[sim_id].Time_Cnt; break;
                }
                return 0;
              }
              #endif
  96          /**/
  97          uchar get_Tid(){
  98   1        uchar i;
  99   1        for(i=0;i<TICK_NUM;i++){
 100   2          if(Ts[i].T_ENABLE==TSTOP)return i;
 101   2        }
 102   1        return 255;
 103   1      }
 104          /**/
 105          void use_test(){
 106   1        uchar i;
 107   1        set_TS(get_Tid(),get_TS(get_Tid()));
 108   1        for(i=0;i<TICK_NUM;i++){
 109   2          Ts[i].T_ENABLE=TSTOP;
 110   2        }
 111   1      }
C51 COMPILER V9.59.0.0   TICKT                                                             03/03/2021 15:21:57 PAGE 3   

 112          /**/
 113          // void Set_Fan(uchar sim_id,uint stime,uint hours,uint mins,uint secs,uint sttime_cnt,uchar sflag){
 114          //  switch(sflag){
 115          //    case 0: Ts[sim_id].Time_Cnt=10-Ts[sim_id].Time_Cnt;   break;
 116          //    case 1: Ts[sim_id].Time_Cnt=100-Ts[sim_id].Time_Cnt;  break;
 117          //    case 2: Ts[sim_id].Time_Cnt=1000-Ts[sim_id].Time_Cnt;   break;
 118          //    case 3: Ts[sim_id].Time_Cnt=60000-Ts[sim_id].Time_Cnt;  break;
 119          //    case 4: Ts[sim_id].Time_Cnt=1000-Ts[sim_id].Time_Cnt;   break;
 120          //    case 5: Ts[sim_id].Time_Cnt=60000-Ts[sim_id].Time_Cnt;  break;
 121          //  }
 122          //  Ts[sim_id].hour = hours-Ts[sim_id].hour;
 123          //  Ts[sim_id].min  = mins-Ts[sim_id].min;
 124          //  Ts[sim_id].sec  = hours-Ts[sim_id].sec;
 125          // }
 126          /**/
 127          /**/
 128          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    673    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    130    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
