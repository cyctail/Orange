C51 COMPILER V9.59.0.0   MIO                                                               03/03/2021 16:23:05 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MIO
OBJECT MODULE PLACED IN .\OBJ\MIO.obj
COMPILER INVOKED BY: D:\sofeware\Keil\Keil5_MDK\C51\BIN\C51.EXE LIB\M_IO\MIO.c OPTIMIZE(9,SPEED) BROWSE INCDIR(.\USER;.\
                    -LIB\Data;.\LIB\eeprom;.\LIB\FunctionOS;.\LIB\OSAL;.\LIB\Scan;.\LIB\SEG;.\LIB\Tick;.\LIB\H;.\LIB\M_IO;.\LIB\M_Math;.\LIB\
                    -DATAST;.\LIB\IIC;.\USER\Mode;.\USER\Scankey;.\USER\Main;.\LIB\SYS) DEBUG OBJECTEXTEND PRINT(.\Listings\MIO.lst) TABS(2) 
                    -OBJECT(.\OBJ\MIO.obj)

line level    source

   1          #include "MIO.h"
   2          // #include "STC8F.H"
   3          
   4          
   5          uchar xdata zc_io_mode1,zc_io_mode2;
   6          /**/
   7          void IO_INIT(){
   8   1        set_io_Mode(0,0,SX);
   9   1        set_io_port_mode(0,SX);
  10   1        set_io(2,0,0);
  11   1        set_io_port(2,0);
  12   1          P0M0=P0M1=0x00;
  13   1          P1M0=P1M1=0x00;
  14   1          P2M0=P2M1=0x00;
  15   1          P3M0=P3M1=0x00;
  16   1          P4M0=P4M1=0x00;
  17   1          P5M0=P5M1=0x00;
  18   1          P6M0=P6M1=0x00;
  19   1          P7M0=P7M1=0x00;
  20   1      }
  21          /**/
  22          void set_io(uchar Port,uchar Pin,uchar IO_Status){
  23   1          switch(Port){
  24   2              case 0: if(IO_Status)P0 |= 0x01<<Pin; else P0 &= ~(0x01<<Pin); break;
  25   2              case 1: if(IO_Status)P1 |= 0x01<<Pin; else P1 &= ~(0x01<<Pin); break;
  26   2              case 2: if(IO_Status)P2 |= 0x01<<Pin; else P2 &= ~(0x01<<Pin); break;
  27   2              case 3: if(IO_Status)P3 |= 0x01<<Pin; else P3 &= ~(0x01<<Pin); break;
  28   2              case 4: if(IO_Status)P4 |= 0x01<<Pin; else P4 &= ~(0x01<<Pin); break;
  29   2              case 5: if(IO_Status)P5 |= 0x01<<Pin; else P5 &= ~(0x01<<Pin); break;
  30   2              case 6: if(IO_Status)P6 |= 0x01<<Pin; else P6 &= ~(0x01<<Pin); break;
  31   2              case 7: if(IO_Status)P7 |= 0x01<<Pin; else P7 &= ~(0x01<<Pin); break;
  32   2          }
  33   1      }
  34          /**/
  35          void set_io_port(uchar Port,uchar IO_DATA){
  36   1          switch(Port){
  37   2              case 0: P0=IO_DATA; break;
  38   2              case 1: P1=IO_DATA; break;
  39   2              case 2: P2=IO_DATA; break;
  40   2              case 3: P3=IO_DATA; break;
  41   2              case 4: P4=IO_DATA; break;
  42   2              case 5: P5=IO_DATA; break;
  43   2              case 6: P6=IO_DATA; break;
  44   2              case 7: P7=IO_DATA; break;
  45   2          }
  46   1      }
  47          /**/
  48          uchar siomode(uchar now_io_mode_1,uchar now_io_mode_2,uchar new_io_mode,uchar Pin){
  49   1          switch(new_io_mode){
  50   2              case SX: now_io_mode_1 &= ~(0x01<<Pin);now_io_mode_2 &= ~(0x01<<Pin); break;  //00
  51   2              case TW: now_io_mode_1 |=  (0x01<<Pin);now_io_mode_2 &= ~(0x01<<Pin); break;  //10
  52   2              case KL: now_io_mode_1 |=  (0x01<<Pin);now_io_mode_2 |=  (0x01<<Pin); break;  //11
C51 COMPILER V9.59.0.0   MIO                                                               03/03/2021 16:23:05 PAGE 2   

  53   2              case GZ: now_io_mode_1 &= ~(0x01<<Pin);now_io_mode_2 |=  (0x01<<Pin); break;  //01
  54   2              default: return 0; break;
  55   2          }
  56   1          zc_io_mode1=now_io_mode_1;zc_io_mode2=now_io_mode_2;
  57   1          return 1;
  58   1      }
  59          /**/
  60          void set_io_Mode(uchar Port,uchar Pin,uchar IO_Mode){
  61   1          switch(Port){
  62   2              case 0: if(siomode(P0M0,P0M1,IO_Mode,Pin)){P0M0=zc_io_mode1;P0M1=zc_io_mode2;} break;
  63   2              case 1: if(siomode(P1M0,P1M1,IO_Mode,Pin)){P1M0=zc_io_mode1;P1M1=zc_io_mode2;} break;
  64   2              case 2: if(siomode(P2M0,P2M1,IO_Mode,Pin)){P2M0=zc_io_mode1;P2M1=zc_io_mode2;} break;
  65   2              case 3: if(siomode(P3M0,P3M1,IO_Mode,Pin)){P3M0=zc_io_mode1;P3M1=zc_io_mode2;} break;
  66   2              case 4: if(siomode(P4M0,P4M1,IO_Mode,Pin)){P4M0=zc_io_mode1;P4M1=zc_io_mode2;} break;
  67   2              case 5: if(siomode(P5M0,P5M1,IO_Mode,Pin)){P5M0=zc_io_mode1;P5M1=zc_io_mode2;} break;
  68   2              case 6: if(siomode(P6M0,P6M1,IO_Mode,Pin)){P6M0=zc_io_mode1;P6M1=zc_io_mode2;} break;
  69   2              case 7: if(siomode(P7M0,P7M1,IO_Mode,Pin)){P7M0=zc_io_mode1;P7M1=zc_io_mode2;} break;
  70   2          }
  71   1      }
  72          /**/
  73          uchar sioport_mode(uchar io_mode){
  74   1          switch(io_mode){
  75   2              case SX: zc_io_mode1=0x00;zc_io_mode2=0x00; break;  //00
  76   2              case TW: zc_io_mode1=0xff;zc_io_mode2=0x00; break;  //10
  77   2              case KL: zc_io_mode1=0xff;zc_io_mode2=0xff; break;  //11
  78   2              case GZ: zc_io_mode1=0x00;zc_io_mode2=0xff; break;  //01
  79   2              default: return 0; break;
  80   2          }
  81   1          return 1;
  82   1      }
  83          /**/
  84          void set_io_port_mode(uchar Port,uchar IO_MODE){
  85   1          if(sioport_mode(IO_MODE)){
  86   2              switch(Port){
  87   3                  case 0: P0M0=zc_io_mode1;P0M1=zc_io_mode2;break;
  88   3                  case 1: P1M0=zc_io_mode1;P1M1=zc_io_mode2;break;
  89   3                  case 2: P2M0=zc_io_mode1;P2M1=zc_io_mode2;break;
  90   3                  case 3: P3M0=zc_io_mode1;P3M1=zc_io_mode2;break;
  91   3                  case 4: P4M0=zc_io_mode1;P4M1=zc_io_mode2;break;
  92   3                  case 5: P5M0=zc_io_mode1;P5M1=zc_io_mode2;break;
  93   3                  case 6: P6M0=zc_io_mode1;P6M1=zc_io_mode2;break;
  94   3                  case 7: P7M0=zc_io_mode1;P7M1=zc_io_mode2;break;
  95   3              }
  96   2          }
  97   1      }
  98          //
  99          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    941    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
